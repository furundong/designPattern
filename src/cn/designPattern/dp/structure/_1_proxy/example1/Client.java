package cn.designPattern.dp.structure._1_proxy.example1;

/*
代理模式：（委托模式） 许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式
想想我们生活中，那里用到了代理。  打游戏，lol代练有吧。 ok
例子如下：普通代理
 */
public class Client {
    public static void main(String[] args) {
        //定义一个痴迷的玩家
        IGamePlayer player = new GamePlayer("张三");  //本来是张三这个号打游戏的，
//然后再定义一个代练者
        IGamePlayer proxy = new GamePlayerProxy(player);     //结果找了个代练。 就是代练去打游戏了。
//开始打游戏，记下时间戳
        System.out.println("开始时间是：2009-8-25 10:45");
        proxy.login("zhangSan", "password");
//开始杀怪
        proxy.killBoss();  //如果接口发生改变，client端也需要的修改
//升级
        proxy.upgrade();
//记录结束游戏时间
        System.out.println("结束时间是：2009-8-26 03:40");
    }
}


/*
不要真的想去打游戏了。。。。。。我们来解释一下代理设计模式

一个代理类可以代理多个被委托者或被代理者，因此一个代理类具体代理哪个真实主题
角色，是由场景类决定的。当然，最简单的情况就是一个主题类和一个代理类，这是最简洁
的代理模式。在通常情况下，一个接口只需要一个代理类就可以了，具体代理哪个实现类由
高层模块来决定，也就是在代理类的构造函数中传递被代理者。

什么意思呢？ 比如说，我们知道mybatis的Dao层就是代理模式。 比如：UserMapper，最多需要一个代理，去实例化。
那么，我们就应该他是个proxyDao，高层模块来决定我是UserMapper或者是BookMapper，你就负责代理就实现就行。

public Proxy(Subject _subject){
this.subject = _subject;
}
你要代理谁就产生该代理的实例，然后把被代理者传递进来，该模式在实际的项目应用中比较广泛。


● 职责清晰
    真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理
    完成一件事务，附带的结果就是编程简洁清晰。
● 高扩展性
    具体主题角色是随时都会发生变化的，只要它实现了接口，甭管它如何变化，都逃不脱
    如来佛的手掌（接口），那我们的代理类完全就可以在不做任何修改的情况下使用。  我觉得这个最棒了
● 智能化
    这在我们以上的讲解中还没有体现出来，不过在我们以下的动态代理章节中你就会看到
    代理的智能化有兴趣的读者也可以看看Struts是如何把表单元素映射到对象上的。

Spring AOP，
mybatis 接口   这是一个非常典型的动态代理


对了对了。 这是一个普通代理。 还有透明代理。 就是你连GamePlayer不需要传。给个名字就好了。

你当然可以代理多个， proxy对象实现多个接口。不同的代理，增强不同的方法。

普通代理：
    普通代理
    透明代理：远程代理可以将网络的细节隐藏起来，使得客户端不必考虑网络的存在。客户完全可以认为被代理的远程业务对象是局域的而不是远程的，而远程代理对象承担了大部分的网络通信工作。
    虚拟代理：当一个对象的加载十分耗费资源的时候，虚拟代理的优势就非常明显地体现出来了。
        虚拟代理模式是一种内存节省技术，那些占用大量内存或处理复杂的对象将推迟到使用它的时候才创建。html页面，图片一直加载。懒加载

远程代理，这种方式通常是为了隐藏目标对象存在于不同地址空间的事实，方便客户端访问。例如，用户申请某些网盘空间时，会在用户的文件系统中建立一个虚拟的硬盘，用户访问虚拟硬盘时实际访问的是网盘空间。
虚拟代理，这种方式通常用于要创建的目标对象开销很大时。例如，下载一幅很大的图像需要很长时间，因某种计算比较复杂而短时间无法完成，这时可以先用小比例的虚拟代理替换真实的对象，消除用户对服务器慢的感觉。
安全代理，这种方式通常用于控制不同种类客户对真实对象的访问权限。
智能指引，主要用于调用目标对象时，代理附加一些额外的处理功能。例如，增加计算真实对象的引用次数的功能，这样当该对象没有被引用时，就可以自动释放它。
延迟加载，指为了提高系统的性能，延迟对目标的加载。例如，Hibernate 中就存在属性的延迟加载和关联表的延时加载。

强制代理，用的少。。。。。（example2）
 */
