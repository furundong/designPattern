类初始化过程
	1. 一个类要创建实例需要先加载并初始化该类
		1. main方法所在的类需要先加载和初始化.
	2. 一个子类要初始化, 必先初始化父类
	3. 一个类的初始化就是执行<clinit>()方法
		1. <clinit>()方法由静态类变量显示赋值代码 和 静态代码块组成
		2. 类变量显示赋值代码和静态代码块代码从上到下顺序执行
		3. <clinit>()方法只执行一次
	4. 类加载只有四种可能
		1. main方法所在的类.
		2. new Object()
		3. Class.forname("")
		4. 调用静态赋值方法
		5. 调用静态方法

实例初始化过程
	1. 实例初始化就是执行<init>()方法
		1. <init>()方法可能重载有多个,有几个构造器就有几个<init>()方法
		2. <init>()方法由 非静态实例变量显示赋值代码 和 非静态代码块, 对应构造器代码组成
		3. 非静态实例变量显示赋值代码 和 非静态代码块代码 从上到下顺序执行, 而对应构造器的代码最后执行
		4. 每次创建实例对象, 调用对应构造器, 执行的就是对应的<init>()方法
		5. <init>()方法的首行是super() 或 super(argument) , 即对应父类的<init>()方法
		6. 这个子类的构造器, 一定会调用父类的构造器.

方法的重写
	非静态方法前面其实都有一个默认的对象this, this在构造器(或<init>())他表示的是正在创建的对象, 如果这里创建的对象是子类, 子类引起的父类的<init>() 所以, 该方法执行的是子类重写的代码. (面向对象多态)
	1. 哪些方法不可以被重写.
		final()
		static
		private

	2. 对象的多态性
		1. 子类如果重写了父类的方法, 通过子类对象调用的一定是子类重写过的代码.
		2. 非静态方法默认的调用对象是this
		3. this对象在构造器或者说<init>()方法中就是正在创建的对象
